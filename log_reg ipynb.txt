{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<img src=\"../../img/ods_stickers.jpg\" />\n",
    "    \n",
    "## [mlcourse.ai](https://mlcourse.ai) – Open Machine Learning Course \n",
    "Authors: Why? [Pavel Nesterov](http://pavelnesterov.info/) (@mephistopheies), [Yury Kashnitskiy](https://yorko.github.io) (@yorko), and [Daniel Potapov](https://www.linkedin.com/in/daniel-potapov/) (@sharthZ23). Edited by [Anastasia Manokhina](https://www.linkedin.com/in/anastasiamanokhina/) (@manokhina). This material is subject to the terms and conditions of the [Creative Commons CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) license. Free use is permitted for any non-commercial purpose."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <center> Assignment #8. Fall 2018\n",
    "## <center> StackOverflow questions tagging with logistic regression\n",
    "\n",
    "**You need to derive formulas where it's asked (yes, with pen and paper), fill in the code in the cells and select answers in the [web form](https://docs.google.com/forms/d/1FsawLzl_i3nw-ahECsJAJkd0SxFsmWDS5sS2hr6RbKY).**\n",
    "\n",
    "## 0. Problem description\n",
    "\n",
    "In this assignment, we will code a model for predicting tags based on a multilabel logistic regression. Unlike the usual setting of a multiclass problem, in this case one example can belong to several classes. We will implement an online version of the multilabel classification algorithm.\n",
    "\n",
    "We will use a small sample of 70k questions extracted from StackOverflow (about 23 MB if zipped, download from [here](https://drive.google.com/file/d/1djuygR3cTXb4go_KMWSOw94WlFKb2NT5/view?usp=sharing)).\n",
    "\n",
    "Actually, such implementations are used in real life (though not implemented in Python). For example, in online [Click-Through Rate](https://en.wikipedia.org/wiki/Click-through_rate) prediction models, the user is shown a banner, then, depending on the presence of a click, the model parameters are updated. In real applications, the amount of model parameters of can reach hundreds of millions, while one user usually has only a hundred or a thousand non-zero parameters out of this hundred millions, therefore it is not effective to vectorize such a model. Usually all user data is stored in huge clusters in in-memory databases, and user processing is distributed.\n",
    "\n",
    "> Data Science is the math for your business \n",
    "\n",
    "To perfectly grasp this folk wisdom, we'll dive into the math of multiclass & multilabel logistic regression."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Multiclass & multilabel logistic regression\n",
    "\n",
    "### 1.1. Softmax classifier (multiclass logistic regression)\n",
    "\n",
    "Let's see how logistic regression is derived for two classes $ \\left\\{0, 1\\right\\}$: the probability that an instance belongs to class $1$ is derived from the Bayes theorem:\n",
    "\n",
    "$$\\large \\begin{array}{rcl}\n",
    "p\\left(c = 1 \\mid \\vec{x}\\right) &=& \\dfrac{p\\left(\\vec{x} \\mid c = 1\\right)p\\left(c = 1\\right)}{p\\left(\\vec{x}\\right)} \\\\\n",
    "&=& \\dfrac{p\\left(\\vec{x} \\mid c = 1\\right)p\\left(c = 1\\right)}{p\\left(\\vec{x} \\mid c = 1\\right)p\\left(c = 1\\right) + p\\left(\\vec{x} \\mid c = 0\\right)p\\left(c = 0\\right)} \\\\\n",
    "&=& \\dfrac{1}{1 + e^{-a}} = \\sigma\\left(a\\right)\n",
    "\\end{array}$$\n",
    "where:\n",
    "- $\\vec{x}$ – is a feature vector\n",
    "- $\\sigma$ – stands for the sigmoid function of a scalar argument\n",
    "- $a = \\log \\frac{p\\left(\\vec{x} \\mid c = 1\\right)p\\left(c = 1\\right)}{p\\left(\\vec{x} \\mid c = 0\\right)p\\left(c = 0\\right)} = \\sum_{i=0}^{d} w_i x_i$ – this relation is modeled by a linear function of features and model parameters\n",
    "\n",
    "This expression can easily be generalized to a set of $ K $ classes, only the denominator in the Bayes formula changes. Let us write down the probability that an instance belongs to class $ k $:\n",
    "$$\\large \\begin{array}{rcl}\n",
    "p\\left(c = k \\mid \\vec{x}\\right) &=& \\dfrac{p\\left(\\vec{x} \\mid c = k\\right)p\\left(c = k\\right)}{\\sum_{i=1}^K p\\left(\\vec{x} \\mid c = i\\right)p\\left(c = i\\right)} = \\dfrac{e^{z_k}}{\\sum_{i=1}^{K}e^{z_i}} = \\sigma_k\\left(\\vec{z}\\right)\n",
    "\\end{array}$$\n",
    "where\n",
    "- $\\sigma_k$ – stands for a softmax function of a vector argument\n",
    "- $z_k = \\log p\\left(\\vec{x} \\mid c = k\\right)p\\left(c = k\\right) = \\sum_{i=0}^{d} w_{ki} x_i$ – this relation is modeled by a linear function of features and model parameters for the class $k$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To model the full likelihood of **one example**  (look, it's not the same as likelihood of the whole training set), we use the [categorical distribution](https://en.wikipedia.org/wiki/Categorical_distribution), or, to be more precise, its logarithm (for convenience):\n",
    "\n",
    "$$\\Large \\mathcal{L} = \\log p\\left({\\vec{x}}\\right) = \\log \\prod_{i=1}^K \\sigma_i\\left(\\vec{z}\\right)^{y_i} = \\sum_{i=1}^K y_i \\log \\sigma_i\\left(\\vec{z}\\right), $$\n",
    "\n",
    "where \n",
    "\n",
    "- $K$ is the number of classes\n",
    "- $y_i$ is either 0 or 1, depending on the true class label of the example $\\vec{x}$\n",
    "\n",
    "It turns out to be a famous [cross entropy](https://en.wikipedia.org/wiki/Cross_entropy) function (if multiplied by $-1$). Likelihood needs to be maximized, and, accordingly, cross entropy should be minimized. By differentiating with respect to the parameters of the model, we will obtain the rules for updating the weights for gradient descent, **do this derivation on your own**, you will need to understand this for further fulfillment of the task:\n",
    "\n",
    "$$\\large \\begin{array}{rcl}\n",
    "\\frac{\\partial \\mathcal{L}}{\\partial w_{km}} &=& x_m \\left(y_k - \\sigma_k\\left(\\vec{z}\\right)\\right)\n",
    "\\end{array}$$\n",
    "\n",
    "Softmax classifier is very well [explained](http://cs231n.github.io/linear-classify/) in Stanford's course cs231n \"Convolutional Neural Networks for Visual Recognition\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2. Multilabel logistic regression\n",
    "\n",
    "It turns out that the softmax classifier tends to predict a high probability for some class and low probabilities for all other classes. That's due to an exponent in the formula of softmax. Also, in the previous formulation, it turns out that the vector $\\left(\\sigma_1, \\sigma_2, \\ldots, \\sigma_K\\right)$ forms a discrete probability distribution, i.e. $\\sum_{i=1}^K \\sigma_i = 1$. But in our problem statement each example can have several tags or can simultaneously belong to several classes. To take it into account we will slightly change the model:\n",
    "- We assume that all tags are independent of each other, i.e. each outcome is a logistic regression on two classes (either there is a tag or not), then the probability that an example has a tag will be written as following (each tag/class has its own set of parameters as in the case of a softmax classifier):\n",
    "$$\\large p\\left(\\text{tag}_k \\mid \\vec{x}\\right) = \\sigma\\left(z_k\\right) = \\sigma\\left(\\sum_{i=0}^d w_{ki} x_i \\right)$$\n",
    "- The presence of each tag will be modeled using <a href=\"https://en.wikipedia.org/wiki/Bernoulli_distribution\">Bernoulli distribution</a>\n",
    "\n",
    "Your first task is to write a simplified expression for the negative log-likelihood (NLL) of one training example. As a rule, many optimization algorithms have an interface for minimizing the function, and we follow the same tradition and multiply the resulting expression for log-likelihood by $-1$ to get NLL $-\\mathcal{L}$. In the second part,  we derive formulas to minimize the resulting expression."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<font color=\"red\">Question 1:</font> What's the correct formula for negative log-likelihood of one training example?**\n",
    "\n",
    "*For discussions, please stick to [ODS Slack](https://opendatascience.slack.com/), channel #mlcourse_ai, pinned thread __#a8_q1__*\n",
    "\n",
    "**<font color=\"red\">Answer options:</font>**\n",
    "1. $\\large -\\mathcal{L} = -\\sum_{i=1}^d y_i \\log \\sigma\\left(z_i\\right) + \\left(1 - y_i\\right) \\log \\left(1 - \\sigma\\left(z_i\\right)\\right)$\n",
    "\n",
    "2. $\\large -\\mathcal{L} = -\\sum_{i=1}^d z_i \\log \\sigma\\left(y_i\\right) + \\left(1 - z_i\\right) \\log \\left(1 - \\sigma\\left(y_i\\right)\\right)$\n",
    "\n",
    "3. $\\large -\\mathcal{L} = -\\sum_{i=1}^K z_i \\log \\sigma\\left(y_i\\right) + \\left(1 - z_i\\right) \\log \\left(1 - \\sigma\\left(y_i\\right)\\right)$\n",
    "\n",
    "4. $\\large -\\mathcal{L} = -\\sum_{i=1}^K y_i \\log \\sigma\\left(z_i\\right) + \\left(1 - y_i\\right) \\log \\left(1 - \\sigma\\left(z_i\\right)\\right)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Deriving the formula for weight updates\n",
    "\n",
    "In the second task, you need to derive the formula for the partial derivative of $-\\mathcal{L}$ w.r.t weights."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "**<font color=\"red\">Question 2:</font> What's the correct formula for the derivative of negative log-likelihood w.r.t. to weights?**\n",
    "\n",
    "*For discussions, please stick to [ODS Slack](https://opendatascience.slack.com/), channel #mlcourse_ai, pinned thread __#a8_q2__*\n",
    "\n",
    "**<font color=\"red\">Answer options:</font>**\n",
    "1. $\\large -\\frac{\\partial \\mathcal{L}}{\\partial w_{km}} = -x_m \\left(y_k - \\sigma\\left(z_k\\right)\\right)$\n",
    "2. $\\large -\\frac{\\partial \\mathcal{L}}{\\partial w_{km}} = -x_m \\left(\\sigma\\left(z_k\\right) - y_k\\right)$\n",
    "3. $\\large -\\frac{\\partial \\mathcal{L}}{\\partial w_{km}} = \\left(y_k - \\sigma\\left(z_k\\right)x_m\\right)$\n",
    "4. $\\large -\\frac{\\partial \\mathcal{L}}{\\partial w_{km}} = \\left(\\sigma\\left(z_k\\right)x_m - y_k\\right)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Basic model implementation\n",
    "First, let's check the configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:14:38.457951Z",
     "start_time": "2018-11-12T21:14:38.450953Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting watermark\n",
      "  Downloading https://files.pythonhosted.org/packages/81/c8/9d3dd05a91bdbda03e24e52870b653c9345a0461294a7290f321bba18fad/watermark-1.7.0-py3-none-any.whl\n",
      "Requirement already satisfied: ipython in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from watermark)\n",
      "Requirement already satisfied: setuptools>=18.5 in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from ipython->watermark)\n",
      "Requirement already satisfied: jedi>=0.10 in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from ipython->watermark)\n",
      "Requirement already satisfied: decorator in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from ipython->watermark)\n",
      "Requirement already satisfied: pickleshare in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from ipython->watermark)\n",
      "Requirement already satisfied: simplegeneric>0.8 in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from ipython->watermark)\n",
      "Requirement already satisfied: traitlets>=4.2 in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from ipython->watermark)\n",
      "Requirement already satisfied: prompt_toolkit<2.0.0,>=1.0.4 in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from ipython->watermark)\n",
      "Requirement already satisfied: pygments in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from ipython->watermark)\n",
      "Requirement already satisfied: appnope in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from ipython->watermark)\n",
      "Requirement already satisfied: pexpect in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from ipython->watermark)\n",
      "Requirement already satisfied: ipython_genutils in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from traitlets>=4.2->ipython->watermark)\n",
      "Requirement already satisfied: six in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from traitlets>=4.2->ipython->watermark)\n",
      "Requirement already satisfied: wcwidth in /Users/katrinq/anaconda3/lib/python3.6/site-packages (from prompt_toolkit<2.0.0,>=1.0.4->ipython->watermark)\n",
      "Installing collected packages: watermark\n",
      "Successfully installed watermark-1.7.0\n",
      "\u001b[33mYou are using pip version 9.0.1, however version 18.1 is available.\n",
      "You should consider upgrading via the 'pip install --upgrade pip' command.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip install watermark\n",
    "%load_ext watermark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:14:39.327913Z",
     "start_time": "2018-11-12T21:14:38.634925Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPython 3.6.2\n",
      "IPython 6.1.0\n",
      "\n",
      "numpy 1.14.0\n",
      "scipy 0.19.1\n",
      "pandas 0.20.3\n",
      "matplotlib 2.0.2\n",
      "sklearn 0.19.0\n",
      "\n",
      "compiler   : GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)\n",
      "system     : Darwin\n",
      "release    : 17.4.0\n",
      "machine    : x86_64\n",
      "processor  : i386\n",
      "CPU cores  : 4\n",
      "interpreter: 64bit\n",
      "Git hash   :\n"
     ]
    }
   ],
   "source": [
    "%watermark -v -m -p numpy,scipy,pandas,matplotlib,sklearn -g"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Docker](https://github.com/Yorko/mlcourse.ai/tree/master/docker_files) and author's laptop configuration**:\n",
    "    \n",
    "CPython 3.5.2<br>\n",
    "IPython 7.0.1\n",
    "\n",
    "numpy 1.15.2<br>\n",
    "scipy 1.1.0<br>\n",
    "pandas 0.23.4<br>\n",
    "matplotlib 3.0.0<br>\n",
    "sklearn 0.20.0\n",
    "\n",
    "compiler   : GCC 5.4.0 20160609<br>\n",
    "system     : Linux<br>\n",
    "release    : 4.17.14-041714-generic<br>\n",
    "machine    : x86_64<br>\n",
    "processor  : x86_64<br>\n",
    "CPU cores  : 12<br>\n",
    "interpreter: 64bit<br>\n",
    "Git hash   : 379461ca2ad94f9ed214dfcc1122f00649852385"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:14:40.368913Z",
     "start_time": "2018-11-12T21:14:39.970765Z"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "from tqdm import tqdm_notebook\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set()\n",
    "%matplotlib inline\n",
    "from IPython.display import clear_output\n",
    "\n",
    "pd.set_option('display.float_format', lambda x: '{:g}'.format(x))\n",
    "np.set_printoptions(suppress=True)\n",
    "sns.set_style(\"dark\")\n",
    "plt.rcParams['figure.figsize'] = 16, 12"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's load and preprocess our [dataset](https://drive.google.com/file/d/1djuygR3cTXb4go_KMWSOw94WlFKb2NT5/view?usp=sharing). Change paths to data files if needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:14:40.783902Z",
     "start_time": "2018-11-12T21:14:40.780892Z"
    }
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('stackoverflow_sample_70k.csv.zip')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>question</th>\n",
       "      <th>tags</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>i ve got some code in window scroll that check...</td>\n",
       "      <td>javascript jquery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>i have a custom adapter for a list view it has...</td>\n",
       "      <td>android</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>in my form panel i added a checkbox setting st...</td>\n",
       "      <td>javascript</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>i have the two dates variables startwork and e...</td>\n",
       "      <td>c#</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>i might have been using the wrong search tags ...</td>\n",
       "      <td>android</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            question               tags\n",
       "0  i ve got some code in window scroll that check...  javascript jquery\n",
       "1  i have a custom adapter for a list view it has...            android\n",
       "2  in my form panel i added a checkbox setting st...         javascript\n",
       "3  i have the two dates variables startwork and e...                 c#\n",
       "4  i might have been using the wrong search tags ...            android"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Top tags on StackOverflow for these 70k questions are the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:14:41.089827Z",
     "start_time": "2018-11-12T21:14:41.083816Z"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "top_tags = ['python', 'ios', 'html', 'android', 'c++', 'jquery', 'java', 'php', 'c#', 'javascript']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`question` and `tags` are strings, so we need to preprocess them. \n",
    "\n",
    "Preprocessing steps will be as follows: \n",
    "- convert to lowercase \n",
    "- strip whitespaces \n",
    "- split by whitespaces to form a list of words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:14:48.264230Z",
     "start_time": "2018-11-12T21:14:45.437883Z"
    },
    "code_folding": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2.65 s, sys: 595 ms, total: 3.25 s\n",
      "Wall time: 3.39 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "df['tags'] = df['tags'].str.lower()\\\n",
    "                       .str.strip()\\\n",
    "                       .str.split(' ')\n",
    "df['question'] = df['question'].str.lower()\\\n",
    "                               .str.strip()\\\n",
    "                               .str.split(' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:14:48.284225Z",
     "start_time": "2018-11-12T21:14:48.267218Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>question</th>\n",
       "      <th>tags</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[i, ve, got, some, code, in, window, scroll, t...</td>\n",
       "      <td>[javascript, jquery]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[i, have, a, custom, adapter, for, a, list, vi...</td>\n",
       "      <td>[android]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[in, my, form, panel, i, added, a, checkbox, s...</td>\n",
       "      <td>[javascript]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[i, have, the, two, dates, variables, startwor...</td>\n",
       "      <td>[c#]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[i, might, have, been, using, the, wrong, sear...</td>\n",
       "      <td>[android]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            question                  tags\n",
       "0  [i, ve, got, some, code, in, window, scroll, t...  [javascript, jquery]\n",
       "1  [i, have, a, custom, adapter, for, a, list, vi...             [android]\n",
       "2  [in, my, form, panel, i, added, a, checkbox, s...          [javascript]\n",
       "3  [i, have, the, two, dates, variables, startwor...                  [c#]\n",
       "4  [i, might, have, been, using, the, wrong, sear...             [android]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:14:48.630133Z",
     "start_time": "2018-11-12T21:14:48.581133Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 70000 entries, 0 to 69999\n",
      "Data columns (total 2 columns):\n",
      "question    70000 non-null object\n",
      "tags        70000 non-null object\n",
      "dtypes: object(2)\n",
      "memory usage: 128.2 MB\n"
     ]
    }
   ],
   "source": [
    "df.info(memory_usage='deep')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You are given a template of the class `LogRegressor`, analyze it carefully paying attention to all comments. Then fill in the blanks, run the resulting model and answer the test question.\n",
    "\n",
    "As you might notice, when you update the weight of $ w_ {km} $, the value of the sign $ x_m $ is used, which is $ 0 $ if the word with the index $ m $ is not in the sentence, and is greater than zero if there is such a word. Accordingly, when calculating a linear combination $ z $ of model weights and sample features, only non-zero attributes of the object should be considered.\n",
    "\n",
    "Hint:\n",
    "- If you implement the calculation of the sigmoid in the same way as in the formula, then for a large negative value $ z $ the calculation of $ e ^ {- z} $ turns into a very large number that will go beyond permissible limits\n",
    "- at the same time $ e ^ {- z} $ from a large positive $z$ will be zero\n",
    "- use properties of the sigmoid function $\\sigma$  to fix this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:14:49.354033Z",
     "start_time": "2018-11-12T21:14:49.324043Z"
    },
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "class LogRegressor():\n",
    "    def __init__(self, tags):  \n",
    "        \"\"\"LogRegressor class constructor\n",
    "    \n",
    "        Parameters\n",
    "        ----------\n",
    "        tags: list of string\n",
    "        \"\"\"\n",
    "        self.__version__ = 'v0.3'\n",
    "        # `set` will drop duplicated tags\n",
    "        self._tags = set(tags)\n",
    "        \n",
    "        # A dictionary that contains the mapping of sentence words and tags into indexes (to save memory)\n",
    "        # example: self._vocab ['exception'] = 17 means that the word \"exception\" has an index of 17\n",
    "        self._vocab = {} #defaultdict(lambda: len(self._vocab))\n",
    "        \n",
    "        # parameters of the model: weights\n",
    "        # for each class / tag we need to store its own vector of weights\n",
    "        # By default, all weights will be zero\n",
    "        # we do not know in advance how many scales we will need\n",
    "        # so for each class we create a dictionary of a variable size with a default value of 0\n",
    "        # example: self._w['java'][self._vocab['exception']] contains weight for word exception and tag java\n",
    "        self._w = dict([(t, defaultdict(int)) for t in tags])\n",
    "        \n",
    "        # parameters of the model: bias term or w_0 weight\n",
    "        self._b = dict([(t, 0) for t in tags])\n",
    "    \n",
    "    def update_vocab(self, words_list):\n",
    "        \"\"\"Update vocab with new words from words_list\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        words_list: list of strings\n",
    "        \"\"\"\n",
    "        for word in words_list:\n",
    "            # every new word will get index=len(self._vocab)\n",
    "            # so at the end of training all wards will numbered from 0 to len(self._vocab)\n",
    "            if word not in self._vocab:\n",
    "                self._vocab[word] = len(self._vocab)\n",
    "    \n",
    "    def generate_vocab(self, df, column_name):\n",
    "        \"\"\"Build words vocab from dataframe column of lists\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        df: pandas.Dataframe\n",
    "        \n",
    "        column_name: string\n",
    "        \"\"\"\n",
    "        if column_name not in df.columns:\n",
    "            raise ValueError(\"DataFrame doesnt have '{}' column!\")\n",
    "        df[column_name].map(self.update_vocab)\n",
    "\n",
    "    def fit_sample(self, sample):\n",
    "        tolerance=1e-16\n",
    "        \"\"\"Fit single sample\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        sample: pandas.Series\n",
    "            dict-like object which contains qeustion and his tags\n",
    "\n",
    "        Returns\n",
    "        -------\n",
    "        pandas.Series object with metrics for sample\n",
    "        \"\"\"\n",
    "        # sample.name is value from df.index aka row number\n",
    "        sample_id = sample.name\n",
    "        question = sample['question']\n",
    "        tags = set(sample['tags'])\n",
    "        \n",
    "        sample_loss = 0\n",
    "        \n",
    "        # derive the gradients for each tag\n",
    "        for tag in self._tags:\n",
    "            # target is 1 if current emample has current tag \n",
    "            y = int(tag in tags)\n",
    "            # calculate linear combination of weights and features\n",
    "            # HERE'S YOUR CODE\n",
    "            # z = ...\n",
    "            z = self._b[tag]\n",
    "            \n",
    "            for word in question:\n",
    "                is_word_unknown = word not in self._vocab\n",
    "                # in the test mode, ignore the words that are not in the vocabulary\n",
    "                if sample_id >= self.top_n_train and is_word_unknown:\n",
    "                    continue\n",
    "                # HERE'S YOUR CODE\n",
    "                # z += ...\n",
    "                z += self._w[tag][self._vocab[word]]\n",
    "                \n",
    "            # calculate the probability of tag \n",
    "            # HERE'S YOUR CODE\n",
    "            # sigma = ...\n",
    "            sigma = 1 / (1 + np.exp(-z)) if z >= 0 else 1 - 1 / (1 + np.exp(z))\n",
    "\n",
    "            # update the value of the loss function for the current example\n",
    "            # HERE'S YOUR CODE\n",
    "            # sample_loss += ...\n",
    "            sample_loss += -y * np.log(np.max([tolerance, sigma])) if y == 1 else -(1 - y) * np.log(1 - np.min([1 - tolerance, sigma]))\n",
    "\n",
    "            # If still in the training part, update the parameters\n",
    "            if sample_id < self.top_n_train:\n",
    "                # compute the log-likelihood derivative by weight\n",
    "                # HERE'S YOUR CODE\n",
    "                # dLdw = ...\n",
    "                dLdw = y - sigma\n",
    "                \n",
    "                # make gradient descent step\n",
    "                # We minimize negative log-likelihood (second minus sign)\n",
    "                # so we go to the opposite direction of the gradient to minimize it (the first minus sign)\n",
    "                delta = self.learning_rate * dLdw\n",
    "                for word in question:                        \n",
    "                    self._w[tag][self._vocab[word]] -= -delta\n",
    "                self._b[tag] -= -delta\n",
    "        if sample_id % self.show_period == 0:\n",
    "            n = sample_id + self.show_period\n",
    "            clear_output(wait=True)\n",
    "            print('LogRegressor {} | {} ({:.2f}%) samples fitted.'.format(\n",
    "                self.__version__,\n",
    "                n, \n",
    "                100 * n / self.total_len))\n",
    "        return pd.Series({'loss': sample_loss})\n",
    "    \n",
    "    def fit_dataframe(self, \n",
    "                      df,\n",
    "                      top_n_train=60000, \n",
    "                      learning_rate=0.1,\n",
    "                      tolerance=1e-16):\n",
    "        \"\"\"One run through dataframe\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        df : pandas.DataFrame\n",
    "            pandas DataFrame with question and tags data\n",
    "\n",
    "        top_n_train : int\n",
    "            first top_n_train samples will be used for training, the rest are for the test\n",
    "            default=60000\n",
    "\n",
    "        learning_rate : float \n",
    "            gradient descent training speed\n",
    "            default=0.1\n",
    "\n",
    "        tolerance : float \n",
    "            used for bounding the values of logarithm argument\n",
    "            default=1e-16\n",
    "\n",
    "        Returns\n",
    "        -------\n",
    "        pandas.DataFrame with metrics for each sample\n",
    "        \"\"\"\n",
    "        self.total_len = df.shape[0]\n",
    "        self.top_n_train = top_n_train\n",
    "        self.learning_rate = learning_rate\n",
    "        self.tolerance = tolerance\n",
    "        \n",
    "        if self.top_n_train > self.total_len:\n",
    "            print(\"Warning! 'top_n_train' more than dataframe rows count!\\n\"\n",
    "                  \"Set default 'top_n_train'=60000\")\n",
    "            self.top_n_train = 60000\n",
    "        \n",
    "        # generating self._vocab\n",
    "        self.generate_vocab(df, column_name='question')\n",
    "        # Show progress every self.show_period sample, 1% by default\n",
    "        self.show_period = self.total_len // 100\n",
    "        # apply self.fit_sample to each row (sample) of dataframe\n",
    "        self.metrics = df.apply(self.fit_sample, axis=1)\n",
    "        return self.metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:17:11.916995Z",
     "start_time": "2018-11-12T21:14:49.651937Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogRegressor v0.3 | 70000 (100.00%) samples fitted.\n",
      "CPU times: user 3min 59s, sys: 10.2 s, total: 4min 10s\n",
      "Wall time: 4min 25s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "model = LogRegressor(tags=top_tags)\n",
    "# by default, we will train on first 60k samples, and test on last 10k\n",
    "metrics = model.fit_dataframe(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:17:11.925980Z",
     "start_time": "2018-11-12T21:17:11.918982Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.4134e-11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8.2889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.86224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.80809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.75791</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        loss\n",
       "0 2.4134e-11\n",
       "1     8.2889\n",
       "2    5.86224\n",
       "3    5.80809\n",
       "4    1.75791"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check if the value of negative logarithmic likelihood has actually decreased. Since we are using stochastic gradient descent, we should not expect a smooth fall of the loss function. We will use a moving average with a window of 10,000 examples to smooth the graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:17:12.104994Z",
     "start_time": "2018-11-12T21:17:11.928979Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a3cb56358>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot = plt.plot(pd.Series(metrics['loss'][:-10000]).rolling(10000).mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Spolier** to save your time: if you get such a graph of the loss function, it's OK. \n",
    "\n",
    "<img src='../../img/assignment8_loss.png' width=40%>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:17:12.116004Z",
     "start_time": "2018-11-12T21:17:12.107994Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of the loss function on the last 10k TRAIN samples: 21.46\n"
     ]
    }
   ],
   "source": [
    "last_10k_train_loss = np.mean(metrics['loss'][-20000:-10000]) \n",
    "print('Mean of the loss function on the last 10k TRAIN samples: {:.2f}'.format(last_10k_train_loss))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<font color=\"red\">Question 3:</font> What's the average value of the cost function for the last 10000 examples of the training set?**\n",
    "\n",
    "*For discussions, please stick to [ODS Slack](https://opendatascience.slack.com/), channel #mlcourse_ai, pinned thread __#a8_q3__*\n",
    "\n",
    "**<font color=\"red\">Answer options:</font>**\n",
    "1. 18.31\n",
    "2. 19.86\n",
    "3. 21.74\n",
    "4. 26.43"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## 4. Model testing\n",
    "\n",
    "In the base model, the first 60k rows are used for training, and the remaining ones are used as a test set. As you can see, the value of negative log-likelihood is not very informative, although it allows you to compare different models. In the fourth task, you need to modify the base model so that the `fit_dataframe` method calculate the value of _accuracy_ on the test portion of the dataset for every sample.\n",
    "\n",
    "The accuracy is defined as following:\n",
    "- consider that the question has a tag if the predicted probability of the tag is greater than 0.9\n",
    "- the accuracy of one example is calculated as [Jaccard coefficient](https://en.wikipedia.org/wiki/Jaccard_index) between the set of real tags and tags predicted by the model\n",
    "  - for example, if the example has real tags ['html', 'jquery'], and according to the model they are ['ios', 'html', 'java'], then the Jaccard coefficient will be |['html', 'jquery'] $\\cap$ ['ios', 'html', 'java']| / |['html', 'jquery'] $\\cup$ ['ios', 'html', 'java']| = |['html']| / |['jquery', 'ios', 'html', 'java']| = 1/4\n",
    "- `fit_dataframe` method returns _pd.DataFrame_ with column _Jaccard_ \n",
    "- For answer you need to calculate **average (mean)** accuracy on _Jaccard_ column on the test set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\">Modified class:</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:17:12.135997Z",
     "start_time": "2018-11-12T21:17:12.117991Z"
    },
    "code_folding": [],
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class LogRegressor():\n",
    "    def __init__(self, tags): \n",
    "        self.__version__ = 'v0.4'\n",
    "        self._tags = set(tags)\n",
    "        self._vocab = {}\n",
    "        self._w = dict([(t, defaultdict(int)) for t in tags])\n",
    "        self._b = dict([(t, 0) for t in tags])\n",
    "    \n",
    "    def update_vocab(self, words_list):\n",
    "        for word in words_list:\n",
    "            if word not in self._vocab:\n",
    "                self._vocab[word] = len(self._vocab)\n",
    "    \n",
    "    def generate_vocab(self, df, column_name):\n",
    "        if column_name not in df.columns:\n",
    "            raise ValueError(\"DataFrame doesnt have '{}' column!\")\n",
    "        df[column_name].map(self.update_vocab)\n",
    "\n",
    "    def fit_sample(self, sample):\n",
    "        sample_id = sample.name\n",
    "        question = sample['question']\n",
    "        tags = set(sample['tags'])\n",
    "        sample_loss = 0\n",
    "        predicted_tags = None\n",
    "        tolerance=1e-16\n",
    "        accuracy_level=0.9\n",
    "        accuracy = []\n",
    "        \n",
    "        for tag in self._tags:\n",
    "            y = int(tag in tags)\n",
    "            # HERE'S YOUR CODE\n",
    "            # z = ...\n",
    "            z = self._b[tag]\n",
    "\n",
    "            for word in question:\n",
    "                is_word_unknown = word not in self._vocab\n",
    "                if sample_id >= self.top_n_train and is_word_unknown:\n",
    "                    continue\n",
    "                # HERE'S YOUR CODE\n",
    "                # z += ...\n",
    "                z += self._w[tag][self._vocab[word]]\n",
    "\n",
    "            # HERE'S YOUR CODE\n",
    "            # sigma = ...\n",
    "            sigma = 1/(1 + np.exp(-z)) if z >= 0 else 1 - 1/(1 + np.exp(z))\n",
    "            \n",
    "            # HERE'S YOUR CODE\n",
    "            # sample_loss += ...\n",
    "            sample_loss += -y*np.log(np.max([tolerance, sigma])) if y == 1 else -(1 - y)*np.log(1 - np.min([1 - tolerance, sigma]))\n",
    "\n",
    "            if sample_id < self.top_n_train:\n",
    "                # HERE'S YOUR CODE\n",
    "                # dLdw = ...\n",
    "                dLdw = y - sigma\n",
    "\n",
    "                delta = self.learning_rate*dLdw\n",
    "                for word in question:                        \n",
    "                    self._w[tag][self._vocab[word]] -= -delta\n",
    "                self._b[tag] -= -delta\n",
    "            else:\n",
    "                if predicted_tags is None:\n",
    "                    predicted_tags = []\n",
    "                # HERE'S YOUR CODE\n",
    "                # if sigma... :\n",
    "                #     predicted_tags...\n",
    "                if sigma > accuracy_level: \n",
    "                    predicted_tags.append(tag)\n",
    "\n",
    "        if sample_id % self.show_period == 0:\n",
    "            n = sample_id + self.show_period\n",
    "            clear_output(wait=True)\n",
    "            print('LogRegressor {} | {} ({:.2f}%) samples fitted.'.format(\n",
    "                self.__version__,\n",
    "                n, \n",
    "                100 * n / self.total_len))\n",
    "        if predicted_tags is not None:\n",
    "            # HERE'S YOUR CODE\n",
    "            # Jaccard = ...\n",
    "            #accuracy.append(len(tags.intersection(predicted_tags))/len(tags.union(predicted_tags)))\n",
    "            Jaccard = len(tags.intersection(predicted_tags))/len(tags.union(predicted_tags))\n",
    "            return pd.Series({'loss': sample_loss, 'Jaccard': Jaccard})\n",
    "        else:\n",
    "            return pd.Series({'loss': sample_loss, 'Jaccard': np.NaN})\n",
    "\n",
    "    \n",
    "    def fit_dataframe(self, \n",
    "                      df,\n",
    "                      top_n_train=60000, \n",
    "                      learning_rate=0.1,\n",
    "                      tolerance=1e-16,\n",
    "                      accuracy_level=0.9):\n",
    "        self.total_len = df.shape[0]\n",
    "        self.top_n_train = top_n_train\n",
    "        self.learning_rate = learning_rate\n",
    "        self.tolerance = tolerance\n",
    "        self.accuracy_level = accuracy_level\n",
    "        \n",
    "        if self.top_n_train > self.total_len:\n",
    "            print(\"Warning! 'top_n_train' more than dataframe rows count!\\n\"\n",
    "                  \"Set default 'top_n_train'=60000\")\n",
    "            self.top_n_train = 60000\n",
    "        \n",
    "        self.generate_vocab(df, column_name='question')\n",
    "        self.show_period = self.total_len // 100\n",
    "        self.metrics = df.apply(self.fit_sample, axis=1)\n",
    "        return self.metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:19:34.050653Z",
     "start_time": "2018-11-12T21:17:12.136994Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogRegressor v0.4 | 70000 (100.00%) samples fitted.\n",
      "CPU times: user 3min 58s, sys: 7.81 s, total: 4min 6s\n",
      "Wall time: 4min 12s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "model = LogRegressor(tags=top_tags)\n",
    "metrics = model.fit_dataframe(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:19:34.060546Z",
     "start_time": "2018-11-12T21:19:34.051636Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Jaccard</th>\n",
       "      <th>loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nan</td>\n",
       "      <td>2.4134e-11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>nan</td>\n",
       "      <td>8.2889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>nan</td>\n",
       "      <td>5.86224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>nan</td>\n",
       "      <td>5.80809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>nan</td>\n",
       "      <td>1.75791</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Jaccard       loss\n",
       "0      nan 2.4134e-11\n",
       "1      nan     8.2889\n",
       "2      nan    5.86224\n",
       "3      nan    5.80809\n",
       "4      nan    1.75791"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:19:34.144200Z",
     "start_time": "2018-11-12T21:19:34.104196Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Jaccard</th>\n",
       "      <th>loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>69995</th>\n",
       "      <td>0.5</td>\n",
       "      <td>2.83062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69996</th>\n",
       "      <td>0</td>\n",
       "      <td>110.315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69997</th>\n",
       "      <td>0.5</td>\n",
       "      <td>29.9103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69998</th>\n",
       "      <td>0</td>\n",
       "      <td>36.8414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69999</th>\n",
       "      <td>0</td>\n",
       "      <td>12.2607</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Jaccard    loss\n",
       "69995      0.5 2.83062\n",
       "69996        0 110.315\n",
       "69997      0.5 29.9103\n",
       "69998        0 36.8414\n",
       "69999        0 12.2607"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6112016666666645"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:19:34.084203Z",
     "start_time": "2018-11-12T21:19:34.062535Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Jaccard accuracy: 0.61\n"
     ]
    }
   ],
   "source": [
    "# HERE'S YOUR CODE\n",
    "# accuracy = ...\n",
    "accuracy = metrics['Jaccard'].mean()\n",
    "print('Mean Jaccard accuracy: {:.2f}'.format(accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "**<font color=\"red\">Question 4:</font> What mean Jaccard accuracy did you get for the test set?**\n",
    "\n",
    "*For discussions, please stick to [ODS Slack](https://opendatascience.slack.com/), channel #mlcourse_ai, pinned thread __#a8_q4__*\n",
    "\n",
    "**<font color=\"red\">Answer options:</font>**\n",
    "1. 0.31\n",
    "2. 0.41\n",
    "3. 0.51\n",
    "4. 0.61"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## 5. $L_2$-regularization\n",
    "\n",
    "In the fifth task, you need to add $ L_2 $-regularization to the `LogRegressor` class. In the `fit_sample` method, the `lambda_ = 0.01` parameter with the default value should appear (we call this argument `lambda_` (with underscore), because `lambda` (without underscores) is a reserved Python name). Taking into account regularization, the new cost function takes the form:\n",
    "\n",
    "$$\\large \\begin{array}{rcl}\n",
    "L &=& -\\mathcal{L} + \\frac{\\lambda}{2} R\\left(W\\right) \\\\\n",
    "&=& -\\mathcal{L} + \\frac{\\lambda}{2} \\sum_{k=1}^K\\sum_{i=1}^d w_{ki}^2\n",
    "\\end{array}$$\n",
    "\n",
    "We have already derived the gradient of the first term of the sum, and for the second one it looks like:\n",
    "\n",
    "$$\\large \\begin{array}{rcl}\n",
    "\\frac{\\partial}{\\partial w_{ki}} \\frac{\\lambda}{2} R\\left(W\\right) &=& \\lambda w_{ki}\n",
    "\\end{array}$$\n",
    "\n",
    "If we make an explicit update of all weights on each example, then the process will be very slow, because we have to run through every word of the dictionary at each iteration. At the expense of the theoretical accuracy, we use a dirty trick: we will regularize only those words that are present in the current sentence. Do not forget that the bias term is not regularized. `sample_loss` should also remain unchanged."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\">Modified class:</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:19:34.102197Z",
     "start_time": "2018-11-12T21:19:34.085202Z"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class LogRegressor():\n",
    "    def __init__(self, tags): \n",
    "        self.__version__ = 'v0.5'\n",
    "        self._tags = set(tags)\n",
    "        self._vocab = {}\n",
    "        self._w = dict([(t, defaultdict(int)) for t in tags])\n",
    "        self._b = dict([(t, 0) for t in tags])\n",
    "    \n",
    "    def update_vocab(self, words_list):\n",
    "        for word in words_list:\n",
    "            if word not in self._vocab:\n",
    "                self._vocab[word] = len(self._vocab)\n",
    "    \n",
    "    def generate_vocab(self, df, column_name):\n",
    "        if column_name not in df.columns:\n",
    "            raise ValueError(\"DataFrame doesnt have '{}' column!\")\n",
    "        df[column_name].map(self.update_vocab)\n",
    "\n",
    "    def fit_sample(self, sample):\n",
    "        sample_id = sample.name\n",
    "        question = sample['question']\n",
    "        tags = set(sample['tags'])\n",
    "        sample_loss = 0\n",
    "        predicted_tags = None\n",
    "        tolerance=1e-16\n",
    "        accuracy_level=0.9\n",
    "        lmbda=0.01\n",
    "        learning_rate=0.1\n",
    "\n",
    "        for tag in self._tags:\n",
    "            y = int(tag in tags)\n",
    "            # HERE'S YOUR CODE\n",
    "            # z = ...\n",
    "            z = self._b[tag]\n",
    "\n",
    "            for word in question:\n",
    "                is_word_unknown = word not in self._vocab\n",
    "                if sample_id >= self.top_n_train and is_word_unknown:\n",
    "                    continue\n",
    "                # HERE'S YOUR CODE\n",
    "                # z += ...\n",
    "                z += self._w[tag][self._vocab[word]]\n",
    "            \n",
    "            # HERE'S YOUR CODE\n",
    "            # sigma = ...\n",
    "            sigma = 1/(1 + np.exp(-z)) if z >= 0 else 1 - 1/(1 + np.exp(z))\n",
    "            \n",
    "            # HERE'S YOUR CODE\n",
    "            # sample_loss += ...\n",
    "            sample_loss += -y*np.log(np.max([tolerance, sigma])) if y == 1 else -(1 - y)*np.log(1 - np.min([1 - tolerance, sigma]))\n",
    "\n",
    "            if sample_id < self.top_n_train:\n",
    "                # HERE'S YOUR CODE\n",
    "                # dLdw = ...\n",
    "                dLdw = y - sigma\n",
    "\n",
    "                delta = self.learning_rate*dLdw\n",
    "                r_buf = {}\n",
    "                for word in question:\n",
    "                    if word not in r_buf:\n",
    "                        r = learning_rate*lmbda*self._w[tag][self._vocab[word]]\n",
    "                        r_buf[word] = True\n",
    "                    else:\n",
    "                        r = 0\n",
    "                        self._w[tag][self._vocab[word]] -= -delta + r\n",
    "                self._b[tag] -= -delta\n",
    "            else:\n",
    "                if predicted_tags is None:\n",
    "                    predicted_tags = []\n",
    "                # HERE'S YOUR CODE\n",
    "                # if sigma... :\n",
    "                #     predicted_tags...\n",
    "                if sigma > accuracy_level:\n",
    "                    predicted_tags.append(tag)\n",
    "\n",
    "        if sample_id % self.show_period == 0:\n",
    "            n = sample_id + self.show_period\n",
    "            clear_output(wait=True)\n",
    "            print('LogRegressor {} | {} ({:.2f}%) samples fitted.'.format(\n",
    "                self.__version__,\n",
    "                n, \n",
    "                100 * n / self.total_len))\n",
    "        if predicted_tags is not None:\n",
    "            # HERE'S YOUR CODE\n",
    "            # Jaccard = ...\n",
    "            Jaccard = len(tags.intersection(predicted_tags))/len(tags.union(predicted_tags))\n",
    "            return pd.Series({'loss': sample_loss, 'Jaccard': Jaccard})\n",
    "        else:\n",
    "            return pd.Series({'loss': sample_loss, 'Jaccard': np.NaN})\n",
    "\n",
    "    \n",
    "    def fit_dataframe(self, \n",
    "                      df,\n",
    "                      top_n_train=60000, \n",
    "                      learning_rate=0.1,\n",
    "                      tolerance=1e-16,\n",
    "                      accuracy_level=0.9,\n",
    "                      lambda_=0.01):\n",
    "        self.total_len = df.shape[0]\n",
    "        self.top_n_train = top_n_train\n",
    "        self.learning_rate = learning_rate\n",
    "        self.tolerance = tolerance\n",
    "        self.accuracy_level = accuracy_level\n",
    "        self.lambda_ = lambda_\n",
    "\n",
    "        if self.top_n_train > self.total_len:\n",
    "            print(\"Warning! 'top_n_train' more than dataframe rows count!\\n\"\n",
    "                  \"Set default 'top_n_train'=60000\")\n",
    "            self.top_n_train = 60000\n",
    "        \n",
    "        self.generate_vocab(df, column_name='question')\n",
    "        self.show_period = self.total_len // 100\n",
    "        self.metrics = df.apply(self.fit_sample, axis=1)\n",
    "        return self.metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:22:47.257582Z",
     "start_time": "2018-11-12T21:19:34.149186Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogRegressor v0.5 | 70000 (100.00%) samples fitted.\n",
      "CPU times: user 4min 25s, sys: 11.1 s, total: 4min 36s\n",
      "Wall time: 4min 37s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "model = LogRegressor(tags=top_tags)\n",
    "metrics = model.fit_dataframe(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:22:47.407541Z",
     "start_time": "2018-11-12T21:22:47.259567Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.54\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n3XbbbbLb7erSpYskaezYsVq+fLkOHz6scePGSZKGDRum9evXq7CwsM59gUCWLFmiPn366JZbblFh\nYaHuvfdevfvuuzH9mRiTazrPPPNMxcVV59OGYchisUiSUlNTVVBQoMLCQqWlpbn6VLXXpy8QSGpq\nqtLS0lRYWKjbb79d06dP570IU8TFxWnmzJn64x//qDPPPJP3IcLugw8+UEZGhuuLucSfzTBHUlKS\nrr/+er3++ut6+OGHdd999yk5Odl13d/7y2az+X3P+epbUVERnn8gRKWjR49q/fr1+vOf/6yHH35Y\n99xzT8x/JsbkSGdNVmt1bl1UVKRmzZopLS1NRUVFHu3p6en16gvUZv/+/brlllt09dVX67zzztMT\nTzzhusZ7EeE0d+5c3XPPPbr88stVVlbmaud9iHD45z//KYvFouXLl2vTpk2aOXOmjhw54rrO+xDh\n0r17d3Xt2lUWi0Xdu3dXenq68vLyXNer3l+lpaUe7y+Hw+HzPeevr/vgB1BTixYt1KNHDyUkJKhH\njx5KTEzUgQMHXNdj8TMxJkc6axowYIBWrlwpSVq8eLFGjBih4cOHa8mSJXI4HMrOzpbD4VBGRka9\n+gKB5OTkaPLkyZoxY4YuvfRSSbwXEX4fffSRXn75ZUlScnKyLBaLBg0axPsQYfXWW2/pzTff1Btv\nvKH+/ftr7ty5Gj9+PO9DhN3777+vOXPmSJIOHjyokpISpaSkaM+ePTIMQ0uWLHG9vxYvXixJWrNm\njfr06aO0tDTFx8fXqS8QyIknnqhvvvlGhmG43oejR4+O6c9Ei2EYhtlBhMLevXt111136d1339XO\nnTv14IMPqry8XD169NDs2bNls9n03HPPafHixXI4HLrvvvs0YsSIevUFApk9e7a++OIL9ejRw9X2\nwAMPaPbs2bwXETbFxcW67777lJOTo4qKCt14443q2bMnn4kwzTXXXKOHHnpIVquV9yHCzm636777\n7lN2drYsFovuueceWa1WPfroo6qsrNTYsWN15513uirSbtmyRYZh6NFHH1XPnj21Zs2aOvcFAnn8\n8ce1cuVKGYahO++8U506dYrpz8SYTToBAAAAAOZrEtNrAQAAAADmIOkEAAAAAIQMSScAAAAAIGRI\nOgEAAAAAIUPSCQAAAAAIGZJOAAAAAEDIkHQCAAAAAELm/wF/+2ItKMr1xwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a4af902b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# HERE'S YOUR CODE\n",
    "# accuracy = ...\n",
    "accuracy = metrics['Jaccard'].mean()\n",
    "print('{:.2f}'.format(accuracy))\n",
    "plot = plt.plot(pd.Series(metrics['loss'][:-10000]).rolling(10000).mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<font color=\"red\">Question 5:</font> What's the average value of Jaccard accuracy in case of $L_2$-regularization?**\n",
    "\n",
    "*For discussions, please stick to [ODS Slack](https://opendatascience.slack.com/), channel #mlcourse_ai, pinned thread __#a8_q5__*\n",
    "\n",
    "**<font color=\"red\">Answer options:</font>**\n",
    "1. 0.32\n",
    "2. 0.38\n",
    "3. 0.48\n",
    "4. 0.52 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. ElasticNet regularization, derivation\n",
    "In addition to $ L_2 $ regularization, $ L_1 $ regularization is often used.\n",
    "\n",
    "$$\\large \\begin{array}{rcl}\n",
    "L &=& -\\mathcal{L} + \\lambda R\\left(W\\right) \\\\\n",
    "&=& -\\mathcal{L} + \\lambda \\sum_{k=1}^K\\sum_{i=1}^d \\left|w_{ki}\\right|\n",
    "\\end{array}$$\n",
    "\n",
    "If we linearly combine $ L_1 $ and $ L_2 $ regularization, then the resulting regularization type is called **ElasticNet**:\n",
    "\n",
    "$$\\large \\begin{array}{rcl}\n",
    "L &=& -\\mathcal{L} + \\lambda R\\left(W\\right) \\\\\n",
    "&=& -\\mathcal{L} + \\lambda \\left(\\gamma \\sum_{k=1}^K\\sum_{i=1}^d w_{ki}^2 + \\left(1 - \\gamma\\right) \\sum_{k=1}^K\\sum_{i=1}^d \\left|w_{ki}\\right| \\right)\n",
    "\\end{array}$$\n",
    "- where $\\gamma \\in \\left[0, 1\\right]$\n",
    "\n",
    "Here we omitted the multiplier $\\frac{1}{2}$  that we used for $L_2$-regularization.\n",
    "\n",
    "**<font color=\"red\">Question 6:</font> What's the correct formula for the gradient of the ElasticNet regularization term?**\n",
    "\n",
    "**<font color=\"red\">Answer options:</font>**\n",
    "1. $\\large \\frac{\\partial}{\\partial w_{ki}} \\lambda R\\left(W\\right) = \\lambda \\left(\\gamma w_{ki} + \\left(1 - \\gamma\\right) \\text{sign}\\left(w_{ki}\\right)\\right)$\n",
    "2. $\\large \\frac{\\partial}{\\partial w_{ki}} \\lambda R\\left(W\\right) = \\lambda \\left(2 \\gamma w_{ki} + \\left(1 - \\gamma\\right) w_{ki}\\right)$ \n",
    "3. $\\large \\frac{\\partial}{\\partial w_{ki}} \\lambda R\\left(W\\right) = \\lambda \\left(2 \\gamma w_{ki} + \\left(1 - \\gamma\\right) \\text{sign}\\left(w_{ki}\\right)\\right)$\n",
    "4. $\\large \\frac{\\partial}{\\partial w_{ki}} \\lambda R\\left(W\\right) = \\lambda \\left(2 \\gamma \\left|w_{ki}\\right| + \\left(1 - \\gamma\\right) \\text{sign}\\left(w_{ki}\\right)\\right)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. ElasticNet regularization, implementation\n",
    "\n",
    "In the seventh task you are supposed to change the class `LogRegressor` so that the` fit_dataframe` method takes two parameters with default values `lambda = 0.001` and `gamma = 0.1`. Do one pass through the dataset with ElasticNet regularization and default parameter values and answer the question."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\">Modified class:</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:39:10.815508Z",
     "start_time": "2018-11-12T21:39:10.797514Z"
    },
    "code_folding": [],
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class LogRegressor():\n",
    "    def __init__(self, tags): \n",
    "        self.__version__ = 'v0.7'\n",
    "        self._tags = set(tags)\n",
    "        self._vocab = {}\n",
    "        self._w = dict([(t, defaultdict(int)) for t in tags])\n",
    "        self._b = dict([(t, 0) for t in tags])\n",
    "    \n",
    "    def update_vocab(self, words_list):\n",
    "        for word in words_list:\n",
    "            if word not in self._vocab:\n",
    "                self._vocab[word] = len(self._vocab)\n",
    "    \n",
    "    def generate_vocab(self, df, column_name):\n",
    "        if column_name not in df.columns:\n",
    "            raise ValueError(\"DataFrame doesnt have '{}' column!\")\n",
    "        df[column_name].map(self.update_vocab)\n",
    "\n",
    "    def fit_sample(self, sample):\n",
    "        sample_id = sample.name\n",
    "        question = sample['question']\n",
    "        tags = set(sample['tags'])\n",
    "        sample_loss = 0\n",
    "        predicted_tags = None\n",
    "        tolerance=1e-16\n",
    "        accuracy_level=0.9\n",
    "        lmbda=0.0002\n",
    "        learning_rate=0.1\n",
    "        gamma=0.1\n",
    "\n",
    "        for tag in self._tags:\n",
    "            y = int(tag in tags)\n",
    "            # HERE'S YOUR CODE\n",
    "            # z = ...\n",
    "            z = self._b[tag]\n",
    "\n",
    "            for word in question:\n",
    "                is_word_unknown = word not in self._vocab\n",
    "                if sample_id >= self.top_n_train and is_word_unknown:\n",
    "                    continue\n",
    "                # HERE'S YOUR CODE\n",
    "                # z += ...\n",
    "                z += self._w[tag][self._vocab[word]]\n",
    "            \n",
    "            # HERE'S YOUR CODE\n",
    "            # sigma = ...\n",
    "            sigma = 1/(1 + np.exp(-z)) if z >= 0 else 1 - 1/(1 + np.exp(z))\n",
    "            \n",
    "            # HERE'S YOUR CODE\n",
    "            # sample_loss += ...\n",
    "            sample_loss += -y*np.log(np.max([tolerance, sigma])) if y == 1 else -(1 - y)*np.log(1 - np.min([1 - tolerance, sigma]))\n",
    "\n",
    "            if sample_id < self.top_n_train:\n",
    "                # HERE'S YOUR CODE\n",
    "                # dLdw = ...\n",
    "                dLdw = y - sigma\n",
    "\n",
    "                delta = self.learning_rate*dLdw\n",
    "                r_buf = {}\n",
    "                for word in question:\n",
    "                    if word not in r_buf:\n",
    "                        r = 2 * learning_rate * lmbda * gamma * self._w[tag][self._vocab[word]] + learning_rate * lmbda*(1 - gamma) * np.sign(self._w[tag][self._vocab[word]])\n",
    "                        r_buf[word] = True\n",
    "                    else:\n",
    "                        r = 0\n",
    "                        self._w[tag][self._vocab[word]] -= -delta + r\n",
    "                self._b[tag] -= -delta\n",
    "            else:\n",
    "                if predicted_tags is None:\n",
    "                    predicted_tags = []\n",
    "                # HERE'S YOUR CODE\n",
    "                # if sigma... :\n",
    "                #     predicted_tags...\n",
    "                if sigma > accuracy_level:\n",
    "                    predicted_tags.append(tag)\n",
    "\n",
    "        if sample_id % self.show_period == 0:\n",
    "            n = sample_id + self.show_period\n",
    "            clear_output(wait=True)\n",
    "            print('LogRegressor {} | {} ({:.2f}%) samples fitted.'.format(\n",
    "                self.__version__,\n",
    "                n, \n",
    "                100 * n / self.total_len))\n",
    "        if predicted_tags is not None:\n",
    "            # HERE'S YOUR CODE\n",
    "            # Jaccard = ...\n",
    "            Jaccard = len(tags.intersection(predicted_tags))/len(tags.union(predicted_tags))\n",
    "            return pd.Series({'loss': sample_loss, 'Jaccard': Jaccard})\n",
    "        else:\n",
    "            return pd.Series({'loss': sample_loss, 'Jaccard': np.NaN})\n",
    "\n",
    "    \n",
    "    def fit_dataframe(self, \n",
    "                      df,\n",
    "                      top_n_train=60000, \n",
    "                      learning_rate=0.1,\n",
    "                      tolerance=1e-16,\n",
    "                      accuracy_level=0.9,\n",
    "                      lambda_=0.01):\n",
    "        self.total_len = df.shape[0]\n",
    "        self.top_n_train = top_n_train\n",
    "        self.learning_rate = learning_rate\n",
    "        self.tolerance = tolerance\n",
    "        self.accuracy_level = accuracy_level\n",
    "        self.lambda_ = lambda_\n",
    "\n",
    "        if self.top_n_train > self.total_len:\n",
    "            print(\"Warning! 'top_n_train' more than dataframe rows count!\\n\"\n",
    "                  \"Set default 'top_n_train'=60000\")\n",
    "            self.top_n_train = 60000\n",
    "        \n",
    "        self.generate_vocab(df, column_name='question')\n",
    "        self.show_period = self.total_len // 100\n",
    "        self.metrics = df.apply(self.fit_sample, axis=1)\n",
    "        return self.metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:45:33.329289Z",
     "start_time": "2018-11-12T21:39:11.641795Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogRegressor v0.7 | 70000 (100.00%) samples fitted.\n",
      "CPU times: user 8min 52s, sys: 11.7 s, total: 9min 4s\n",
      "Wall time: 9min 13s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "model = LogRegressor(tags=top_tags)\n",
    "metrics = model.fit_dataframe(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5434916666666659"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy = metrics['Jaccard'].mean()\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:45:33.498137Z",
     "start_time": "2018-11-12T21:45:33.331289Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n3XbbbbLb7erSpYskaezYsVq+fLkOHz6scePGSZKGDRum9evXq7CwsM59gUCWLFmiPn366JZbblFh\nYaHuvfdevfvuuzH9mRiTazrPPPNMxcVV59OGYchisUiSUlNTVVBQoMLCQqWlpbn6VLXXpy8QSGpq\nqtLS0lRYWKjbb79d06dP570IU8TFxWnmzJn64x//qDPPPJP3IcLugw8+UEZGhuuLucSfzTBHUlKS\nrr/+er3++ut6+OGHdd999yk5Odl13d/7y2az+X3P+epbUVERnn8gRKWjR49q/fr1+vOf/6yHH35Y\n99xzT8x/JsbkSGdNVmt1bl1UVKRmzZopLS1NRUVFHu3p6en16gvUZv/+/brlllt09dVX67zzztMT\nTzzhusZ7EeE0d+5c3XPPPbr88stVVlbmaud9iHD45z//KYvFouXLl2vTpk2aOXOmjhw54rrO+xDh\n0r17d3Xt2lUWi0Xdu3dXenq68vLyXNer3l+lpaUe7y+Hw+HzPeevr/vgB1BTixYt1KNHDyUkJKhH\njx5KTEzUgQMHXNdj8TMxJkc6axowYIBWrlwpSVq8eLFGjBih4cOHa8mSJXI4HMrOzpbD4VBGRka9\n+gKB5OTkaPLkyZoxY4YuvfRSSbwXEX4fffSRXn75ZUlScnKyLBaLBg0axPsQYfXWW2/pzTff1Btv\nvKH+/ftr7ty5Gj9+PO9DhN3777+vOXPmSJIOHjyokpISpaSkaM+ePTIMQ0uWLHG9vxYvXixJWrNm\njfr06aO0tDTFx8fXqS8QyIknnqhvvvlGhmG43oejR4+O6c9Ei2EYhtlBhMLevXt111136d1339XO\nnTv14IMPqry8XD169NDs2bNls9n03HPPafHixXI4HLrvvvs0YsSIevUFApk9e7a++OIL9ejRw9X2\nwAMPaPbs2bwXETbFxcW67777lJOTo4qKCt14443q2bMnn4kwzTXXXKOHHnpIVquV9yHCzm636777\n7lN2drYsFovuueceWa1WPfroo6qsrNTYsWN15513uirSbtmyRYZh6NFHH1XPnj21Zs2aOvcFAnn8\n8ce1cuVKGYahO++8U506dYrpz8SYTToBAAAAAOZrEtNrAQAAAADmIOkEAAAAAIQMSScAAAAAIGRI\nOgEAAAAAIUPSCQAAAAAIGZJOAAAAAEDIkHQCAAAAAELm/wF/+2ItKMr1xwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a4720d3c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# HERE'S YOUR CODE\n",
    "# accuracy = ...\n",
    "accuracy = metrics['Jaccard'].mean()\n",
    "plot = plt.plot(pd.Series(metrics['loss'][:-10000]).rolling(10000).mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "**<font color=\"red\">Question 7:</font> What's the average value of Jaccard accuracy in case of ElasticNet regularization?**\n",
    "\n",
    "*For discussions, please stick to [ODS Slack](https://opendatascience.slack.com/), channel #mlcourse_ai, pinned thread __#a8_q7__*\n",
    "\n",
    "**<font color=\"red\">Answer options:</font>**\n",
    "1. 0.51\n",
    "2. 0.61\n",
    "3. 0.71\n",
    "4. 0.81"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. The most important words for a tag\n",
    "\n",
    "The beauty of linear models is that they are somewhat interpretable. You are supposed to calculate which words contribute the most to the probability of each of the tags. And then answer the question."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:45:36.839055Z",
     "start_time": "2018-11-12T21:45:33.501141Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "python : python, py, def, np, print\n",
      "javascript : 125, span, javascript, document, getelementbyid\n",
      "ios : dylib, ios, frame, corefoundation, let\n",
      "c++ : cout, c++, std, _defaultimage, include\n",
      "html : some, span, quot, html, href\n",
      "php : php, x5c, 125, echo, _post\n",
      "android : android, d, activity, intent, gles20\n",
      "jquery : jquery, ajax, script, val, option\n",
      "java : java, println, quot, servlet, bean\n",
      "c# : nbsp, binding, 00, system, asp\n"
     ]
    }
   ],
   "source": [
    "model._vocab_inv = dict([(v, k) for (k, v) in model._vocab.items()])\n",
    "top = 5\n",
    "for tag in model._tags:\n",
    "    # HERE'S YOUR CODE\n",
    "    # top5_words = ...\n",
    "    print(tag, ':', ', '.join([model._vocab_inv[k] \n",
    "            for (k, v) in sorted(model._w[tag].items(), key=lambda t: t[1], reverse=True)[:5]])) \n",
    "    #print(tag, ':', ', '.join(top5_words))    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For many tags, the presence of the tag itself in the sentence is an important signal, and for many, the tag itself is the strongest signal, which is not surprising. \n",
    "\n",
    "**<font color=\"red\">Question 8:</font> For which of the tags the tag name itself is not included in the top 5 most important words?**\n",
    "\n",
    "*For discussions, please stick to [ODS Slack](https://opendatascience.slack.com/), channel #mlcourse_ai, pinned thread __#a8_q8__*\n",
    "\n",
    "**<font color=\"red\">Answer options:</font>**\n",
    "1. android\n",
    "2. javascript\n",
    "3. jquery\n",
    "4. c#"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## 9. Reducing the size of the dictionary\n",
    "\n",
    "Now the number of words in the dictionary is too big. If it was a sample of 10 million questions from the StackOverflow website, then the dictionary size would've been ~ 10 million as well. You can regularize the model not only mathematically, but also simply limiting the size of the dictionary. You are supposed to make the following changes in the class `LogRegressor`:\n",
    "- add `self._word_stats = defaultdict(int)` to `__init__` to calculate word frequencies\n",
    "- add one more argument to the `fit_dataframe` method with the default value `freeze_vocab = False`\n",
    "- when `freeze_vocab = False` allow to add words to the dictionary and word_stats\n",
    "- when `freeze_vocab = True` ignore words not from the dictionary and don't update word_stats\n",
    "- add the class method `filter_vocab (n = 10000)`, which will leave only top-n most popular words in the dictionary\n",
    "\n",
    "For first `fit_dataframe` call use `learning_rate=0.2`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\">Modified class:</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:45:36.879043Z",
     "start_time": "2018-11-12T21:45:36.844053Z"
    }
   },
   "outputs": [],
   "source": [
    "class LogRegressor():\n",
    "    def __init__(self, tags): \n",
    "        self.__version__ = 'v0.7'\n",
    "        self._tags = set(tags)\n",
    "        self._vocab = {}\n",
    "        self._w = dict([(t, defaultdict(int)) for t in tags])\n",
    "        self._b = dict([(t, 0) for t in tags])\n",
    "        self._word_stats = defaultdict(int)\n",
    "    \n",
    "    def update_vocab(self, words_list):\n",
    "        update_vocab=True\n",
    "        for word in words_list:\n",
    "            if word not in self._vocab and update_vocab:\n",
    "                self._vocab[word] = len(self._vocab)\n",
    "            if word not in self._vocab:\n",
    "                continue\n",
    "    \n",
    "    def generate_vocab(self, df, column_name):\n",
    "        if column_name not in df.columns:\n",
    "            raise ValueError(\"DataFrame doesnt have '{}' column!\")\n",
    "        df[column_name].map(self.update_vocab)\n",
    "\n",
    "    def fit_sample(self, sample):\n",
    "        sample_id = sample.name\n",
    "        question = sample['question']\n",
    "        tags = set(sample['tags'])\n",
    "        sample_loss = 0\n",
    "        predicted_tags = None\n",
    "        tolerance=1e-16\n",
    "        accuracy_level=0.9\n",
    "        lmbda=0.0002\n",
    "        learning_rate=0.1\n",
    "        gamma=0.1\n",
    "        update_vocab=True\n",
    "\n",
    "        for ix_tag,tag in enumerate(self._tags):\n",
    "            y = int(tag in tags)\n",
    "            # HERE'S YOUR CODE\n",
    "            # z = ...\n",
    "            z = self._b[tag]\n",
    "\n",
    "            for word in question:\n",
    "                is_word_unknown = word not in self._vocab\n",
    "                if sample_id >= self.top_n_train and is_word_unknown:\n",
    "                    continue\n",
    "                if update_vocab and ix_tag == 0 and sample_id < self.top_n_train:\n",
    "                    self._word_stats[self._vocab[word]] += 1\n",
    "                # HERE'S YOUR CODE\n",
    "                # z += ...\n",
    "                z += self._w[tag][self._vocab[word]]\n",
    "            \n",
    "            # HERE'S YOUR CODE\n",
    "            # sigma = ...\n",
    "            sigma = 1/(1 + np.exp(-z)) if z >= 0 else 1 - 1/(1 + np.exp(z))\n",
    "            \n",
    "            # HERE'S YOUR CODE\n",
    "            # sample_loss += ...\n",
    "            sample_loss += -y*np.log(np.max([tolerance, sigma])) if y == 1 else -(1 - y)*np.log(1 - np.min([1 - tolerance, sigma]))\n",
    "\n",
    "            if sample_id < self.top_n_train:\n",
    "                # HERE'S YOUR CODE\n",
    "                # dLdw = ...\n",
    "                dLdw = y - sigma\n",
    "\n",
    "                delta = self.learning_rate*dLdw\n",
    "                r_buf = {}\n",
    "                for word in question:\n",
    "                    if word not in r_buf:\n",
    "                        r = 2 * learning_rate * lmbda * gamma * self._w[tag][self._vocab[word]] + learning_rate * lmbda*(1 - gamma) * np.sign(self._w[tag][self._vocab[word]])\n",
    "                        r_buf[word] = True\n",
    "                    else:\n",
    "                        r = 0\n",
    "                        self._w[tag][self._vocab[word]] -= -delta + r\n",
    "                self._b[tag] -= -delta\n",
    "            else:\n",
    "                if predicted_tags is None:\n",
    "                    predicted_tags = []\n",
    "                # HERE'S YOUR CODE\n",
    "                # if sigma... :\n",
    "                #     predicted_tags...\n",
    "                if sigma > accuracy_level:\n",
    "                    predicted_tags.append(tag)\n",
    "\n",
    "        if sample_id % self.show_period == 0:\n",
    "            n = sample_id + self.show_period\n",
    "            clear_output(wait=True)\n",
    "            print('LogRegressor {} | {} ({:.2f}%) samples fitted.'.format(\n",
    "                self.__version__,\n",
    "                n, \n",
    "                100 * n / self.total_len))\n",
    "        if predicted_tags is not None:\n",
    "            # HERE'S YOUR CODE\n",
    "            # Jaccard = ...\n",
    "            Jaccard = len(tags.intersection(predicted_tags))/len(tags.union(predicted_tags))\n",
    "            return pd.Series({'loss': sample_loss, 'Jaccard': Jaccard})\n",
    "        else:\n",
    "            return pd.Series({'loss': sample_loss, 'Jaccard': np.NaN})\n",
    "\n",
    "    \n",
    "    def filter_vocab(self, n=10000):\n",
    "        keep_words = set([wid for (wid, wn) in sorted(self._word_stats.items(), key=lambda t: t[1], reverse=True)[:n]])\n",
    "        self._vocab = dict([(k, v) for (k, v) in self._vocab.items() if v in keep_words])\n",
    "        for tag in self._tags:\n",
    "            self._w[tag] = dict([(k, v) for (k, v) in self._w[tag].items() if k in keep_words])\n",
    "    \n",
    "    def fit_dataframe(self, \n",
    "                      df,\n",
    "                      top_n_train=60000, \n",
    "                      learning_rate=0.1,\n",
    "                      tolerance=1e-16,\n",
    "                      accuracy_level=0.9,\n",
    "                      lambda_=0.01):\n",
    "        self.total_len = df.shape[0]\n",
    "        self.top_n_train = top_n_train\n",
    "        self.learning_rate = learning_rate\n",
    "        self.tolerance = tolerance\n",
    "        self.accuracy_level = accuracy_level\n",
    "        self.lambda_ = lambda_\n",
    "\n",
    "        if self.top_n_train > self.total_len:\n",
    "            print(\"Warning! 'top_n_train' more than dataframe rows count!\\n\"\n",
    "                  \"Set default 'top_n_train'=60000\")\n",
    "            self.top_n_train = 60000\n",
    "        \n",
    "        self.generate_vocab(df, column_name='question')\n",
    "        self.show_period = self.total_len // 100\n",
    "        self.metrics = df.apply(self.fit_sample, axis=1)\n",
    "        return self.metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "model = LogRegressor(tags=top_tags)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:52:34.210452Z",
     "start_time": "2018-11-12T21:45:36.881041Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogRegressor v0.7 | 70000 (100.00%) samples fitted.\n",
      "Mean Jaccard accuracy: 0.54\n",
      "CPU times: user 9min 9s, sys: 10.9 s, total: 9min 20s\n",
      "Wall time: 9min 22s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n3XbbbbLb7erSpYskaezYsVq+fLkOHz6scePGSZKGDRum9evXq7CwsM59gUCWLFmiPn366JZbblFh\nYaHuvfdevfvuuzH9mRiTazrPPPNMxcVV59OGYchisUiSUlNTVVBQoMLCQqWlpbn6VLXXpy8QSGpq\nqtLS0lRYWKjbb79d06dP570IU8TFxWnmzJn64x//qDPPPJP3IcLugw8+UEZGhuuLucSfzTBHUlKS\nrr/+er3++ut6+OGHdd999yk5Odl13d/7y2az+X3P+epbUVERnn8gRKWjR49q/fr1+vOf/6yHH35Y\n99xzT8x/JsbkSGdNVmt1bl1UVKRmzZopLS1NRUVFHu3p6en16gvUZv/+/brlllt09dVX67zzztMT\nTzzhusZ7EeE0d+5c3XPPPbr88stVVlbmaud9iHD45z//KYvFouXLl2vTpk2aOXOmjhw54rrO+xDh\n0r17d3Xt2lUWi0Xdu3dXenq68vLyXNer3l+lpaUe7y+Hw+HzPeevr/vgB1BTixYt1KNHDyUkJKhH\njx5KTEzUgQMHXNdj8TMxJkc6axowYIBWrlwpSVq8eLFGjBih4cOHa8mSJXI4HMrOzpbD4VBGRka9\n+gKB5OTkaPLkyZoxY4YuvfRSSbwXEX4fffSRXn75ZUlScnKyLBaLBg0axPsQYfXWW2/pzTff1Btv\nvKH+/ftr7ty5Gj9+PO9DhN3777+vOXPmSJIOHjyokpISpaSkaM+ePTIMQ0uWLHG9vxYvXixJWrNm\njfr06aO0tDTFx8fXqS8QyIknnqhvvvlGhmG43oejR4+O6c9Ei2EYhtlBhMLevXt111136d1339XO\nnTv14IMPqry8XD169NDs2bNls9n03HPPafHixXI4HLrvvvs0YsSIevUFApk9e7a++OIL9ejRw9X2\nwAMPaPbs2bwXETbFxcW67777lJOTo4qKCt14443q2bMnn4kwzTXXXKOHHnpIVquV9yHCzm636777\n7lN2drYsFovuueceWa1WPfroo6qsrNTYsWN15513uirSbtmyRYZh6NFHH1XPnj21Zs2aOvcFAnn8\n8ce1cuVKGYahO++8U506dYrpz8SYTToBAAAAAOZrEtNrAQAAAADmIOkEAAAAAIQMSScAAAAAIGRI\nOgEAAAAAIUPSCQAAAAAIGZJOAAAAAEDIkHQCAAAAAELm/wF/+2ItKMr1xwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a45b6ceb8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%time\n",
    "model = LogRegressor(tags=top_tags)\n",
    "\n",
    "# HERE'S YOUR CODE\n",
    "# metrics = model.fit_dataframe(df, ...\n",
    "# HERE'S YOUR CODE\n",
    "# accuracy = ...\n",
    "metrics = model.fit_dataframe(df)\n",
    "accuracy = metrics['Jaccard'].mean()\n",
    "print('Mean Jaccard accuracy: {:.2f}'.format(accuracy))\n",
    "plot = plt.plot(pd.Series(metrics['loss'][:-10000]).rolling(10000).mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We leave only 10 000 words."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:52:35.099786Z",
     "start_time": "2018-11-12T21:52:34.211441Z"
    }
   },
   "outputs": [],
   "source": [
    "model.filter_vocab(n=10000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Do one more iteration through the dataset, reducing learning rate 20 times and L2-regularization 5 times with freezed vocab:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:58:00.298402Z",
     "start_time": "2018-11-12T21:52:35.100786Z"
    }
   },
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "(0, 'occurred at index 0')",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<timed exec>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m<ipython-input-144-12f70a1be424>\u001b[0m in \u001b[0;36mfit_dataframe\u001b[0;34m(self, df, top_n_train, learning_rate, tolerance, accuracy_level, lambda_)\u001b[0m\n\u001b[1;32m    125\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerate_vocab\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumn_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'question'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow_period\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtotal_len\u001b[0m \u001b[0;34m//\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_sample\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    128\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.6/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, axis, broadcast, raw, reduce, args, **kwds)\u001b[0m\n\u001b[1;32m   4260\u001b[0m                         \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4261\u001b[0m                         \u001b[0mreduce\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreduce\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4262\u001b[0;31m                         ignore_failures=ignore_failures)\n\u001b[0m\u001b[1;32m   4263\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4264\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_apply_broadcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.6/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_apply_standard\u001b[0;34m(self, func, axis, ignore_failures, reduce)\u001b[0m\n\u001b[1;32m   4356\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4357\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseries_gen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4358\u001b[0;31m                     \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4359\u001b[0m                     \u001b[0mkeys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4360\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-144-12f70a1be424>\u001b[0m in \u001b[0;36mfit_sample\u001b[0;34m(self, sample)\u001b[0m\n\u001b[1;32m     48\u001b[0m                 \u001b[0;31m# HERE'S YOUR CODE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m                 \u001b[0;31m# z += ...\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m                 \u001b[0mz\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_w\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtag\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_vocab\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m             \u001b[0;31m# HERE'S YOUR CODE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: (0, 'occurred at index 0')"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# HERE'S YOUR CODE\n",
    "# metrics = model.fit_dataframe(df, ...\n",
    "# HERE'S YOUR CODE\n",
    "# accuracy = ...\n",
    "metrics = model.fit_dataframe(df)\n",
    "accuracy = metrics['Jaccard'].mean()\n",
    "\n",
    "print('Mean Jaccard accuracy: {:.2f}'.format(accuracy))\n",
    "plot = plt.plot(pd.Series(metrics['loss'][:-10000]).rolling(10000).mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "**<font color=\"red\">Question 9:</font> What's the average value of Jaccard accuracy in case of reducing the dictionary size?**\n",
    "\n",
    "*For discussions, please stick to [ODS Slack](https://opendatascience.slack.com/), channel #mlcourse_ai, pinned thread __#a8_q9__*\n",
    "\n",
    "**<font color=\"red\">Answer options:</font>**\n",
    "1. 0.66\n",
    "2. 0.69\n",
    "3. 0.72 \n",
    "4. 0.75"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10. Predicting tags for new questions\n",
    "\n",
    "At the end of this assignment, you are supposed to implement the method `predict_proba`, which takes a model and a string containing the question and returns a list of predicted question tags with their probabilities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:58:40.677323Z",
     "start_time": "2018-11-12T21:58:40.671312Z"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def predict_proba(model, sentence):\n",
    "    p = {}\n",
    "    # HERE'S YOUR CODE\n",
    "    sentence = sentence.split(' ')\n",
    "    for tag in self._tags:\n",
    "        z = self._b[tag]\n",
    "        for word in sentence:\n",
    "            if word not in self._vocab:\n",
    "                continue\n",
    "            z += self._w[tag][self._vocab[word]]\n",
    "        sigma = 1 / (1 + np.exp(-z)) if z >= 0 else 1 - 1 / (1 + np.exp(z))\n",
    "        p[tag] = sigma\n",
    "    return p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:58:41.226458Z",
     "start_time": "2018-11-12T21:58:41.223459Z"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sentence = (\"I want to improve my coding skills, so I have planned write \" +\n",
    "            \"a Mobile Application.need to choose between Apple's iOS or Google's Android.\" +\n",
    "            \" my background: I have done basic programming in .Net,C/C++,Python and PHP \" +\n",
    "            \"in college, so got OOP concepts covered. about my skill level, I just know \" +\n",
    "            \"concepts and basic syntax. But can't write complex applications, if asked :(\" +\n",
    "            \" So decided to hone my skills, And I wanted to know which is easier to \" +\n",
    "            \"learn for a programming n00b. A) iOS which uses Objective C B) Android \" + \n",
    "            \"which uses Java. I want to decide based on difficulty level\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Preprocessing of the question (sentence) will only include converting it to lower case and deleting commas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:58:42.315626Z",
     "start_time": "2018-11-12T21:58:42.311628Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'self' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-155-feb041120fae>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-153-6ec49850114f>\u001b[0m in \u001b[0;36mpredict_proba\u001b[0;34m(model, sentence)\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0;31m# HERE'S YOUR CODE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0msentence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mtag\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tags\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m         \u001b[0mz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_b\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtag\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'self' is not defined"
     ]
    }
   ],
   "source": [
    "pred = predict_proba(model, sentence.lower().replace(',', ''))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:58:42.963020Z",
     "start_time": "2018-11-12T21:58:42.960009Z"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tag_preds = sorted(pred.items(), key=lambda t: t[1], reverse=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-11-12T21:58:43.381228Z",
     "start_time": "2018-11-12T21:58:43.376229Z"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "list(filter(lambda t: t[1] > 0.9, tag_preds))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<font color=\"red\">Question 10:</font> Which tag or tags are associated with this question if the acceptance threshold is $ 0.9 $?**\n",
    "\n",
    "*For discussions, please stick to [ODS Slack](https://opendatascience.slack.com/), channel #mlcourse_ai, pinned thread __#a8_q10__*\n",
    "\n",
    "**<font color=\"red\">Answer options:</font>**\n",
    "1. ios\n",
    "2. android\n",
    "3. c#, c++\n",
    "4. ios, php"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PS: in the original question the following four tags are put: java, android, objective-c, ios."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
